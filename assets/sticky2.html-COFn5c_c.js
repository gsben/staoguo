import{_ as s,c as a,d as p,o as e}from"./app-DnEI9AHB.js";const t={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="vue-js-的机制和流程" tabindex="-1"><a class="header-anchor" href="#vue-js-的机制和流程"><span>Vue.js 的机制和流程</span></a></h1><p>Vue.js 的整个流程可以从 源码架构、运行机制 和 生命周期 三个方面详细解析</p><h2 id="_1-vue-的源码架构" tabindex="-1"><a class="header-anchor" href="#_1-vue-的源码架构"><span>1. Vue 的源码架构</span></a></h2><p>Vue 的源码主要分为以下几个核心模块：</p><p>. Observer（响应式系统）：使用 Object.defineProperty（Vue 2）或 Proxy（Vue 3）实现数据响应式。</p><p>. Compiler（编译器）：将模板解析成虚拟 DOM（Virtual DOM）渲染函数。</p><p>. Virtual DOM（虚拟 DOM）：Vue 维护一棵虚拟 DOM 树，并使用 Diff 算法高效更新真实 DOM。</p><p>. Renderer（渲染器）：负责将虚拟 DOM 转换成真实 DOM，并更新 UI。</p><p>. Scheduler（调度器）：负责任务调度，确保批量更新，提高性能。</p><h2 id="_2-vue-的运行机制" tabindex="-1"><a class="header-anchor" href="#_2-vue-的运行机制"><span>2. Vue 的运行机制</span></a></h2><p>Vue 的运行流程大致如下：</p><h3 id="_1-初始化-vue-实例" tabindex="-1"><a class="header-anchor" href="#_1-初始化-vue-实例"><span>1.初始化 Vue 实例</span></a></h3><h3 id="_2-模板编译" tabindex="-1"><a class="header-anchor" href="#_2-模板编译"><span>2.模板编译</span></a></h3><h3 id="_3-响应式数据初始化" tabindex="-1"><a class="header-anchor" href="#_3-响应式数据初始化"><span>3.响应式数据初始化</span></a></h3><h3 id="_4-首次渲染" tabindex="-1"><a class="header-anchor" href="#_4-首次渲染"><span>4.首次渲染</span></a></h3><h3 id="_5-监听数据变化" tabindex="-1"><a class="header-anchor" href="#_5-监听数据变化"><span>5.监听数据变化</span></a></h3><h3 id="_6-数据更新时-触发重新渲染" tabindex="-1"><a class="header-anchor" href="#_6-数据更新时-触发重新渲染"><span>6.数据更新时，触发重新渲染</span></a></h3><h3 id="_7-销毁-vue-实例" tabindex="-1"><a class="header-anchor" href="#_7-销毁-vue-实例"><span>7.销毁 Vue 实例</span></a></h3><h2 id="_2-详细流程" tabindex="-1"><a class="header-anchor" href="#_2-详细流程"><span>2. 详细流程</span></a></h2><h3 id="_1-初始化-vue-实例-1" tabindex="-1"><a class="header-anchor" href="#_1-初始化-vue-实例-1"><span>① 初始化 Vue 实例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Hello Vue!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue 通过 new Vue() 进入初始化阶段，主要执行：</p><p>合并配置（mergeOptions）：解析 data、methods、computed 等选项。</p><p>创建响应式数据（initData）：调用 Observer 监听数据变化，劫持 data。</p><p>编译模板（compile）：如果 template 选项存在，会将其编译成渲染函数 render()。</p><p>挂载组件（mountComponent）：进入挂载流程，渲染页面。</p><h3 id="_2-模板编译-1" tabindex="-1"><a class="header-anchor" href="#_2-模板编译-1"><span>② 模板编译</span></a></h3><p>Vue 的模板编译是 三步：</p><p>解析模板（Parse）：将模板解析成 AST（抽象语法树）。</p><p>优化 AST（Optimize）：标记静态节点，优化渲染性能。</p><p>生成渲染函数（Generate）：将 AST 转换成 render 函数。</p><p>示例：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译后：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;app&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 render() 生成虚拟 DOM，Vue 通过它高效更新页面。</p><h3 id="_3-响应式数据初始化-1" tabindex="-1"><a class="header-anchor" href="#_3-响应式数据初始化-1"><span>③ 响应式数据初始化</span></a></h3><p>Vue 采用 数据劫持 + 发布-订阅模式 实现响应式：</p><h4 id="数据劫持-observer" tabindex="-1"><a class="header-anchor" href="#数据劫持-observer"><span>数据劫持（Observer）</span></a></h4><p>1.Vue 2 通过 Object.defineProperty 监听 data 的 getter 和 setter。</p><p>2.Vue 3 通过 Proxy 代理整个对象。</p><h4 id="依赖收集-dep-watcher" tabindex="-1"><a class="header-anchor" href="#依赖收集-dep-watcher"><span>依赖收集（Dep &amp; Watcher）</span></a></h4><p>1.当组件使用 data 时，Vue 记录 Watcher 依赖。</p><p>2.当数据变化时，通知 Watcher 触发更新。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Hello Vue!&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据获取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据更新&quot;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    value <span class="token operator">=</span> newValue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">updateComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发 UI 更新</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-首次渲染-1" tabindex="-1"><a class="header-anchor" href="#_4-首次渲染-1"><span>④ 首次渲染</span></a></h3><p>1.执行 render() 生成虚拟 DOM</p><p>2.通过 patch() 生成真实 DOM 并插入页面</p><p>3.绑定事件监听器</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function-variable function">updateComponent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_render() -&gt; 生成虚拟 DOM</p><p>_update() -&gt; 计算差异并更新 DOM</p><h3 id="_5-监听数据变化-1" tabindex="-1"><a class="header-anchor" href="#_5-监听数据变化-1"><span>⑤ 监听数据变化</span></a></h3><p>当数据发生变化时，Vue 通过以下流程更新 UI：</p><p>1.触发 setter</p><p>2.依赖收集的 Watcher 触发 updateComponent()</p><p>3.执行 render() 生成新的虚拟 DOM</p><p>4.patch() 比较新旧虚拟 DOM，更新真实 DOM</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">data.message = &#39;Hello World!&#39;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>触发 setter 后，Vue 会通知 Watcher，更新 UI。</p><h3 id="_6-重新渲染" tabindex="-1"><a class="header-anchor" href="#_6-重新渲染"><span>⑥ 重新渲染</span></a></h3><p>Vue 采用 Diff 算法 优化 DOM 更新：</p><p>1.对比新旧虚拟 DOM</p><p>2.找出最小差异</p><p>3.只更新变化的部分</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">diff(oldVNode, newVNode);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Vue 通过 同级比较、标签类型相同则对比属性、递归子节点 等策略，减少 DOM 操作，提高性能。</p><h3 id="_7-销毁-vue-实例-1" tabindex="-1"><a class="header-anchor" href="#_7-销毁-vue-实例-1"><span>⑦ 销毁 Vue 实例</span></a></h3><p>当调用 vm.$destroy() 时：</p><p>1.销毁组件</p><p>2.移除响应式监听</p><p>3.解绑事件</p><p>4.移除 DOM</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">vm.$destroy();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-vue-生命周期" tabindex="-1"><a class="header-anchor" href="#_3-vue-生命周期"><span>3. Vue 生命周期</span></a></h2><p>Vue 组件从创建到销毁会经历 8 个生命周期钩子：</p><p>1.beforeCreate：实例初始化前，data 和 methods 还未创建。</p><p>2.created：实例已创建，data 已初始化。</p><p>3.beforeMount：模板编译完成，但未挂载 DOM。</p><p>4.mounted：组件已挂载，el 可访问。</p><p>5.beforeUpdate：数据变化，虚拟 DOM 重新渲染前触发。</p><p>6.updated：数据更新后，DOM 已同步。</p><p>7.beforeDestroy：组件销毁前，可执行清理工作。</p><p>8.destroyed：组件销毁后，所有监听器、子组件已移除。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Hello Vue!&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;beforeCreate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;beforeMount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;mounted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;beforeUpdate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;updated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;beforeDestroy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;destroyed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="初始化-vue-实例" tabindex="-1"><a class="header-anchor" href="#初始化-vue-实例"><span>初始化 Vue 实例</span></a></h3><p>配置合并 初始化响应式 编译模板</p><h3 id="首次渲染" tabindex="-1"><a class="header-anchor" href="#首次渲染"><span>首次渲染</span></a></h3><p>生成虚拟 DOM patch() 渲染真实 DOM</p><h3 id="数据监听" tabindex="-1"><a class="header-anchor" href="#数据监听"><span>数据监听</span></a></h3><p>Observer 监听 data Dep &amp; Watcher 依赖收集</p><h3 id="更新流程" tabindex="-1"><a class="header-anchor" href="#更新流程"><span>更新流程</span></a></h3><p>触发 setter 重新执行, render() patch() 更新 DOM</p><h3 id="组件销毁" tabindex="-1"><a class="header-anchor" href="#组件销毁"><span>组件销毁</span></a></h3><p>移除 DOM 清理监听器</p><p>这样 Vue 通过 响应式数据、虚拟 DOM、Diff 算法 实现高效渲染。</p>`,97)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/posts/sticky2.html","title":"Vue.js 的机制和流程","lang":"en-US","frontmatter":{"date":"2025-04-06T00:00:00.000Z","category":["front"],"tag":["vue"],"sticky":10},"git":{"updatedTime":1746875376000,"contributors":[{"name":"gsben","username":"gsben","email":"704684827@qq.com","commits":2,"url":"https://github.com/gsben"}],"changelog":[{"hash":"1cc1e1af9d88c615888ce5bde0368326f65f45d1","time":1746875376000,"email":"704684827@qq.com","author":"gsben","message":"提交一版"},{"hash":"fedb5cc9654cc7c06da94ed6b6caf3e2b9f1234d","time":1743828315000,"email":"704684827@qq.com","author":"gsben","message":"init"}]},"filePathRelative":"posts/sticky2.md","excerpt":"\\n<p>Vue.js 的整个流程可以从 源码架构、运行机制 和 生命周期 三个方面详细解析</p>\\n"}');export{i as comp,u as data};
